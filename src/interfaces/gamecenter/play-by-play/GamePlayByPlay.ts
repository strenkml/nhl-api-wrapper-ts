// Generated by multi-json-to-ts

import { GAME_TYPE, ICommonGameIdInput } from "../../Common";

export interface IGamePlayByPlayInput extends ICommonGameIdInput {}

export interface IGamePlayByPlayOutput_venue {
  default: string;
}

export interface IGamePlayByPlayOutput_tvBroadcasts {
  id: number;
  market: string;
  countryCode: string;
  network: string;
  sequenceNumber: number;
}
export interface IGamePlayByPlayOutput_periodDescriptor {
  number: number;
  periodType: string;
  maxRegulationPeriods: number;
}
export interface IGamePlayByPlayOutput_placeName {
  default: string;
  fr?: string;
}
export interface IGamePlayByPlayOutput_placeNameWithPreposition {
  default: string;
  fr: string;
}
export interface IGamePlayByPlayOutput_awayTeam {
  id: number;
  name: IGamePlayByPlayOutput_venue;
  abbrev: string;
  score: number;
  sog: number;
  logo: string;
  placeName: IGamePlayByPlayOutput_placeName;
  placeNameWithPreposition: IGamePlayByPlayOutput_placeNameWithPreposition;
}
export interface IGamePlayByPlayOutput_clock {
  timeRemaining: string;
  secondsRemaining: number;
  running: boolean;
  inIntermission: boolean;
}
export interface IGamePlayByPlayOutput_gameOutcome {
  lastPeriodType: string;
}
export interface IGamePlayByPlayOutput_plays_details {
  eventOwnerTeamId?: number;
  losingPlayerId?: number;
  winningPlayerId?: number;
  xCoord?: number;
  yCoord?: number;
  zoneCode?: string;
  typeCode?: string;
  descKey?: string;
  duration?: number;
  committedByPlayerId?: number;
  drawnByPlayerId?: number;
  shotType?: string;
  shootingPlayerId?: number;
  goalieInNetId?: number;
  awaySOG?: number;
  homeSOG?: number;
  blockingPlayerId?: number;
  reason?: string;
  hittingPlayerId?: number;
  hitteePlayerId?: number;
  playerId?: number;
  secondaryReason?: string;
  scoringPlayerId?: number;
  scoringPlayerTotal?: number;
  assist1PlayerId?: number;
  assist1PlayerTotal?: number;
  awayScore?: number;
  homeScore?: number;
  highlightClip?: number;
  assist2PlayerId?: number;
  assist2PlayerTotal?: number;
}

export interface IGamePlayByPlayOutput_plays {
  eventId: number;
  periodDescriptor: IGamePlayByPlayOutput_periodDescriptor;
  timeInPeriod: string;
  timeRemaining: string;
  situationCode: string;
  homeTeamDefendingSide: string;
  typeCode: number;
  typeDescKey: string;
  sortOrder: number;
  details?: IGamePlayByPlayOutput_plays_details;
  pptReplayUrl?: string;
}
export interface IGamePlayByPlayOutput_rosterSpots_firstName {
  default: string;
  cs?: string;
  de?: string;
  es?: string;
  fi?: string;
  sk?: string;
  sv?: string;
}
export interface IGamePlayByPlayOutput_rosterSpots_lastName {
  default: string;
  cs?: string;
  sk?: string;
  de?: string;
  fi?: string;
  sv?: string;
}

export interface IGamePlayByPlayOutput_rosterSpots {
  teamId: number;
  playerId: number;
  firstName: IGamePlayByPlayOutput_rosterSpots_firstName;
  lastName: IGamePlayByPlayOutput_rosterSpots_lastName;
  sweaterNumber: number;
  positionCode: string;
  headshot: string;
}
export interface IGamePlayByPlayOutput_summary {}

export interface IGamePlayByPlayOutput {
  id: number;
  season: number;
  gameType: GAME_TYPE;
  limitedScoring: boolean;
  gameDate: string;
  venue: IGamePlayByPlayOutput_venue;
  venueLocation: IGamePlayByPlayOutput_venue;
  startTimeUTC: string;
  easternUTCOffset: string;
  venueUTCOffset: string;
  tvBroadcasts: IGamePlayByPlayOutput_tvBroadcasts[];
  gameState: string;
  gameScheduleState: string;
  periodDescriptor: IGamePlayByPlayOutput_periodDescriptor;
  awayTeam: IGamePlayByPlayOutput_awayTeam;
  homeTeam: IGamePlayByPlayOutput_awayTeam;
  shootoutInUse: boolean;
  otInUse: boolean;
  clock: IGamePlayByPlayOutput_clock;
  displayPeriod: number;
  maxPeriods: number;
  gameOutcome: IGamePlayByPlayOutput_gameOutcome;
  plays: IGamePlayByPlayOutput_plays[];
  rosterSpots: IGamePlayByPlayOutput_rosterSpots[];
  regPeriods: number;
  summary: IGamePlayByPlayOutput_summary;
}
